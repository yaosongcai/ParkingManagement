package com.tcc.parkingmanagement.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tcc.parkingmanagement.database.HistoryInfoTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_INFO_TABLE".
*/
public class HistoryInfoTableDao extends AbstractDao<HistoryInfoTable, Long> {

    public static final String TABLENAME = "HISTORY_INFO_TABLE";

    /**
     * Properties of entity HistoryInfoTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WarehousingId = new Property(1, String.class, "warehousingId", false, "WAREHOUSING_ID");
        public final static Property PlateNo = new Property(2, String.class, "plateNo", false, "PLATE_NO");
        public final static Property WarehousingTime = new Property(3, String.class, "warehousingTime", false, "WAREHOUSING_DATE");
        public final static Property OutTime = new Property(4, String.class, "outTime", false, "OUT_TIME");
        public final static Property OutTimes = new Property(5, String.class, "outTimes", false, "OUT_TIMES");
        public final static Property TotalAmout = new Property(6, String.class, "totalAmout", false, "TOTAL_AMOUT");
        public final static Property TotalTime = new Property(7, String.class, "totalTime", false, "TOTAL_DATE");
        public final static Property IsMonthlyTicket = new Property(8, String.class, "isMonthlyTicket", false, "MONTHLY_TICKET");
        public final static Property ParkManagerId = new Property(9, String.class, "parkManagerId", false, "PARKMANAGER_ID");
        public final static Property ParkName = new Property(10, String.class, "parkName", false, "PARK_NAME");
    }


    public HistoryInfoTableDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryInfoTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_INFO_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WAREHOUSING_ID\" TEXT," + // 1: warehousingId
                "\"PLATE_NO\" TEXT," + // 2: plateNo
                "\"WAREHOUSING_DATE\" TEXT," + // 3: warehousingTime
                "\"OUT_TIME\" TEXT," + // 4: outTime
                "\"OUT_TIMES\" TEXT," + // 5: outTimes
                "\"TOTAL_AMOUT\" TEXT," + // 6: totalAmout
                "\"TOTAL_DATE\" TEXT," + // 7: totalTime
                "\"MONTHLY_TICKET\" TEXT," + // 8: isMonthlyTicket
                "\"PARKMANAGER_ID\" TEXT," + // 9: parkManagerId
                "\"PARK_NAME\" TEXT);"); // 10: parkName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_INFO_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryInfoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String warehousingId = entity.getWarehousingId();
        if (warehousingId != null) {
            stmt.bindString(2, warehousingId);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(3, plateNo);
        }
 
        String warehousingTime = entity.getWarehousingTime();
        if (warehousingTime != null) {
            stmt.bindString(4, warehousingTime);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(5, outTime);
        }
 
        String outTimes = entity.getOutTimes();
        if (outTimes != null) {
            stmt.bindString(6, outTimes);
        }
 
        String totalAmout = entity.getTotalAmout();
        if (totalAmout != null) {
            stmt.bindString(7, totalAmout);
        }
 
        String totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindString(8, totalTime);
        }
 
        String isMonthlyTicket = entity.getIsMonthlyTicket();
        if (isMonthlyTicket != null) {
            stmt.bindString(9, isMonthlyTicket);
        }
 
        String parkManagerId = entity.getParkManagerId();
        if (parkManagerId != null) {
            stmt.bindString(10, parkManagerId);
        }
 
        String parkName = entity.getParkName();
        if (parkName != null) {
            stmt.bindString(11, parkName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryInfoTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String warehousingId = entity.getWarehousingId();
        if (warehousingId != null) {
            stmt.bindString(2, warehousingId);
        }
 
        String plateNo = entity.getPlateNo();
        if (plateNo != null) {
            stmt.bindString(3, plateNo);
        }
 
        String warehousingTime = entity.getWarehousingTime();
        if (warehousingTime != null) {
            stmt.bindString(4, warehousingTime);
        }
 
        String outTime = entity.getOutTime();
        if (outTime != null) {
            stmt.bindString(5, outTime);
        }
 
        String outTimes = entity.getOutTimes();
        if (outTimes != null) {
            stmt.bindString(6, outTimes);
        }
 
        String totalAmout = entity.getTotalAmout();
        if (totalAmout != null) {
            stmt.bindString(7, totalAmout);
        }
 
        String totalTime = entity.getTotalTime();
        if (totalTime != null) {
            stmt.bindString(8, totalTime);
        }
 
        String isMonthlyTicket = entity.getIsMonthlyTicket();
        if (isMonthlyTicket != null) {
            stmt.bindString(9, isMonthlyTicket);
        }
 
        String parkManagerId = entity.getParkManagerId();
        if (parkManagerId != null) {
            stmt.bindString(10, parkManagerId);
        }
 
        String parkName = entity.getParkName();
        if (parkName != null) {
            stmt.bindString(11, parkName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HistoryInfoTable readEntity(Cursor cursor, int offset) {
        HistoryInfoTable entity = new HistoryInfoTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // warehousingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // plateNo
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // warehousingTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // outTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outTimes
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // totalAmout
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // totalTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // isMonthlyTicket
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // parkManagerId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // parkName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryInfoTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWarehousingId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlateNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWarehousingTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOutTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOutTimes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotalAmout(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotalTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIsMonthlyTicket(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setParkManagerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setParkName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HistoryInfoTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HistoryInfoTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HistoryInfoTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
